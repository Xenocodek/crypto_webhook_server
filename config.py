"""
Файл конфигурации для FastAPI webhook-сервера.
"""
import os
from dotenv import load_dotenv

load_dotenv()

# Токен вашего Telegram-бота (необходим для отправки уведомлений пользователю)
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN_HERE")

# Токен вашего приложения Crypto Pay (необходим для проверки подписи webhook)
# Этот токен используется для создания секретного ключа путем хеширования SHA256
# и затем для проверки подписи HMAC-SHA256 входящих вебхуков
CRYPTO_PAY_API_TOKEN = os.getenv("CRYPTO_PAY_API_TOKEN", "YOUR_CRYPTO_PAY_API_TOKEN_HERE")

# Примечание: Проверка подписи вебхуков от Crypto Pay
# Алгоритм проверки:
# 1. Создаем секретный ключ как SHA256 хеш от токена приложения
# 2. Создаем HMAC-SHA256 подпись от тела запроса (неразобранная JSON строка)
# 3. Сравниваем полученную подпись с заголовком crypto-pay-api-signature
# 4. Дополнительно проверяем поле request_date, чтобы предотвратить использование устаревших данных

# Базовый URL для импорта функций бота (если webhook и бот в разных процессах/серверах)
# В данном случае, мы будем использовать aiogram Bot API для отправки сообщений напрямую.
# Этот параметр может не понадобиться, если мы отправляем сообщения через HTTP запрос к самому боту
# или используем общую библиотеку.

# Путь к временному хранилищу invoice_id <-> chat_id, если оно используется совместно.
# В нашем случае, бот хранит это у себя, а webhook будет вызывать функцию бота.
# Для упрощения, предполагаем, что webhook будет иметь доступ к функции отправки сообщений бота
# или будет использовать API Telegram напрямую с токеном бота.

